import ActivityLog from "../models/ActivityLog.js";

export const startSession = async (req, res) => {
    try {
        const newActivity = new ActivityLog({
            userId: req.userId,
            startTime: new Date(),
            keyboardActivity: 0,
            mouseActivity: 0,
            usedApps: [],
            screenshots: []
        });

        await newActivity.save();

        res.status(201).json({ message: "–°–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞—á–∞—Ç–∞", activityId: newActivity._id });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏" });
    }
};

export const endSession = async (req, res) => {
    try {
        console.log("üîç –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", req.body);

        const { activityId, keyboardActivity, mouseActivity, usedApps, screenshots } = req.body;

        if (!activityId) {
            return res.status(400).json({ message: "–û—à–∏–±–∫–∞: activityId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        const updatedActivity = await ActivityLog.findByIdAndUpdate(
            activityId,
            {
                endTime: new Date(),
                duration: Math.round((Date.now() - new Date(activityId.startTime)) / 60000),
                keyboardActivity: keyboardActivity ?? 0,
                mouseActivity: mouseActivity ?? 0,
                usedApps: usedApps ?? [],
                screenshots: screenshots ?? []
            },
            { new: true } // ‚úÖ –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        );

        if (!updatedActivity) {
            return res.status(404).json({ message: "–û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        console.log("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:", updatedActivity);

        res.json({
            message: "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            activity: updatedActivity
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏" });
    }
};




export const getActivityLogs = async (req, res) => {
    try {
        const logs = await ActivityLog.find({ userId: req.userId }).sort({ startTime: -1 });

        res.json(logs);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};


export const getUserActivity = async (req, res) => {
    try {
        const logs = await ActivityLog.find({ userId: req.userId }).sort({ startTime: -1 });

        res.json(logs);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" });
    }
};
